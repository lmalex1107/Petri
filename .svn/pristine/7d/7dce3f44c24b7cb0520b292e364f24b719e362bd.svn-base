package model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class PetriNet {
	private ArrayList<Knot> knotlist;
	private ArrayList<Arc> arclist;
	private ArrayList<Knot> placelist;
	private ArrayList<Knot> transitionlist;
	private Knot actual_transition = null;
	private int[] Marking;
	private int[] former_Marking;
	private Erreichbarkeitsgraph ergraph;
	
	
	
	
	/**
	 * Im Konstruktor werden die Listen der Knoten und ihren Verbindungen übergeben.
	 * Es wird aus den Angaben in den @Biden Listen ein Petri-Netz erstellt.
	 * @param knotlist
	 * @param arclist
	 */
	public PetriNet(ArrayList<Knot> knotlist, ArrayList<Arc> arclist) {
		this.knotlist = knotlist;
		this.arclist = arclist;
		connectKnots();
		makePlacelist();
		makeTransitionlist();
		Marking = new int[this.placelist.size()];
		changeMarking();
		ergraph = new Erreichbarkeitsgraph(this.Marking);
	}
	
	
	
	
	
	
	
	private Knot find (String id) {
		Knot transition = null;
		boolean found = false;
		int i = 0;
		do {
			if (this.transitionlist.get(i).getId().equals(id)) {
				transition = this.transitionlist.get(i);
			}
			else {
				i++;
			}
		}
		while ((found = false) && i < this.transitionlist.size());
		return transition;
	}
	
 	private void connectKnots() {										
		for (int i = 0; i < arclist.size(); i++) {					//jeweils zuweisen von Vorgängern und Nachfolgern
			boolean found = false;
			int j = 0;
			do {
				System.out.println("Petrinet-Konstruktor-Test" + j);
				if (arclist.get(i).getSource().equals(knotlist.get(j).getId())) {
					System.out.println("Test2");
					found = true;
					
				}
				else {
					j++;
				}
			}
			while (found == false);
			
			found = false;
			int k = 0;
			
			do {
				if (arclist.get(i).getTarget().equals(knotlist.get(k).getId())) {
					found = true;
				}
				else {
					k++;
				}
			}
			while (found == false);
			knotlist.get(j).setSuccessor(knotlist.get(k));
			knotlist.get(k).setPredecessor(knotlist.get(j));
		}
	}
	
	private void makePlacelist() {
		this.placelist = new ArrayList<Knot>();
		for (int i = 0; i < this.knotlist.size(); i++) {
			System.out.println("Test IV");
			if (this.knotlist.get(i).getClass().toString().equals("class model.Place")) {
				System.out.println("Test V");
				this.placelist.add(this.knotlist.get(i));
			}
		}
		Collections.sort(this.placelist);
	}
	
	private void makeTransitionlist() {
		this.transitionlist= new ArrayList<Knot>();
		for (int i = 0; i < this.knotlist.size(); i++) {
			if (this.knotlist.get(i).getClass().toString().equals("class model.Transition"));
			this.transitionlist.add(this.knotlist.get(i));
		}
	}
	
	/**
	 * Schalten einer Transition
	 */
  	public void firing(String id) {
		boolean found = false;
		int i = 0;
		do {
			if (id.equals(this.knotlist.get(i).getId()) && (this.knotlist.get(i).getClass().toString().equals("class model.Transition"))) {					//Suchen der richtigen Transition
				found = true;												//und überprüfen, ob Bedingungen für 
				boolean predecessor_marked = true;							//das Schalten erfüllt sind.
				if ((knotlist.get(i).getPredecessorList().size() > 0) && (knotlist.get(i).getSuccessorList().size() > 0)) {
					for (int j = 0; j < knotlist.get(i).getPredecessorList().size(); j++) {
						if (knotlist.get(i).getPredecessorList().get(j).getToken() > 0)  {
							
						}
						else { 
							predecessor_marked = false;
						}
					}
					if (predecessor_marked == true) {
						for (int k = 0; k < knotlist.get(i).getPredecessorList().size(); k++ ) {
							knotlist.get(i).getPredecessorList().get(k).plusToken(-1);
						}
						for (int l = 0; l < knotlist.get(i).getSuccessorList().size(); l++) {
							knotlist.get(i).getSuccessorList().get(l).plusToken(1);
						}
					}
					
					
				}
																			//Wenn ja, dann wird geschaltet.
			}
			else {
				i++;
			}
			
			
		}
		while ((found == false) && (i  < knotlist.size()));
		if (i == knotlist.size()) {											//Wenn die zweite Bedingungen der obrigen Schleife zutrifft,
			i = knotlist.size() - 1;										//muss das eine i wieder abgezogen werden.
		}
		this.actual_transition = find(id);
		changeMarking();
		ergraph.insert_knot(this.Marking, this.former_Marking, this.knotlist.get(i).getId());
		
	}
	
 	public boolean isfiringpossible() {								//Kann überhaupt noch geschaltet werden?
 		boolean firingpossible = false;
 		int i = 0;
 		do {
 			int j = 0;
 			do {
 				if(this.transitionlist.get(i).getPredecessorList().size() > 0) {
 					if (this.transitionlist.get(i).getPredecessorList().get(j).getToken() > 0) {
 						firingpossible = true;
 					}
 					else {
 	 					j++;
 	 				}
 				}
 				
 			}
 			while ((firingpossible == false) && (j < this.transitionlist.get(i).getPredecessorList().size()));
 			i++;
 		}
 		while ((firingpossible == false) && (i < this.transitionlist.size()));
 		
 		return firingpossible;
 	}
 	
	/**
	 * gibt das komplette Petri-Netz zurück,
	 * d.h. den Graphen mit allen Knoten, jeweils mit Vorgänger
	 * und Nachfolger versehen.
	 * @return this.knotlist
	 */
	public ArrayList<Knot> getcompleteKnotList(){
		return this.knotlist;
	}
	
	public int[] getMarking() {
		return this.Marking;
	}
	
	public int[] getFormer_Marking() {
		return this.former_Marking;
	}
	
	private void changeMarking() {
		this.former_Marking = Arrays.copyOf(this.Marking, this.Marking.length);
		
		for (int j = 0; j < this.Marking.length; j++) {
			this.Marking[j] = placelist.get(j).getToken();
		}
	}
	
	public ArrayList<Knot> getPlacelist(){
		return this.placelist;
	}
}
