package control;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.JDialog;

import org.graphstream.ui.view.ViewerListener;

import model.Arc;
import model.Erreichbarkeitsnet;
import model.Knot;
import model.PetriNet;
import view.Erreichbarkeitsgraph;
import view.GUI;
import view.PetriGraph;


public class Control implements ActionListener, ViewerListener, MouseListener{
	ArrayList<Knot> knotlist = null;
	ArrayList<Arc> arclist = null;
	GUI gui;
	PetriGraph petrigraph = null;
	PetriNet petrinet = null;
	Erreichbarkeitsnet ernet = null;
	Erreichbarkeitsgraph ergraph = null;
	
	File[] xmlfiles = null;
	File xmlfile = null; 
	
	public Control () {
		petrigraph = new PetriGraph(knotlist, arclist);
		ergraph = new Erreichbarkeitsgraph();
		
		gui = new GUI(this, knotlist, arclist, petrigraph, ergraph);
		
		System.out.println(System.identityHashCode( petrigraph ));			//Test
		
	
	}
	
	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == gui.oeffnen) {
			this.petrigraph = gui.open(this.petrigraph);
			this.xmlfile = gui.getXmlFile();
			this.knotlist = gui.getKnotList();
			this.arclist = gui.getArcList();
			this.petrinet = new PetriNet(this.knotlist, this.arclist);	
			this.ernet = this.petrinet.getERNet(); 																//Übergabe des Petrinetzes an die Klasse zur
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());						//Berechnung des Erreichbarkeitsgraphen. 
			
			System.out.println(System.identityHashCode( petrigraph ));
			
		}
		
		if (ae.getSource() == gui.neu_laden) {
			petrigraph = gui.reopen(petrigraph);
			this.knotlist = gui.getKnotList();
			this.arclist = gui.getArcList();
			this.petrinet = new PetriNet(this.knotlist, this.arclist);
			
			petrigraph.loadGraph(this.knotlist, this.arclist);
			petrigraph.changeGraph(this.knotlist);
			
			this.ernet = this.petrinet.getERNet();
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
			
		}
		
		if (ae.getSource() == gui.analyse_ALL) {
			xmlfiles = gui.analyse_ALL();
			Analyse analyse = new Analyse (xmlfiles, gui.textarea);
			analyse.analyse_ALL();
		}
		
		if (ae.getSource() == gui.beenden) {
			gui.exit();
		}
		
		if (ae.getSource() == gui.schalten){
			System.out.println("Die Taste 'Schalten' wurde betätigt");					
			for (int i = 0; i < this.petrinet.getTransitionlist().size() ; i++) {
				if (this.petrinet.getTransitionlist().get(i).getSelection() == true) {
					this.petrinet.firing(this.petrinet.getTransitionlist().get(i).getId());
					this.ernet.insert_knot(this.petrinet.getMarking(), this.petrinet.getFormer_Marking(), this.petrinet.getTransitionlist().get(i).getId());
					this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
					break;
				}
			}
			this.petrigraph.changeGraph(this.petrinet.getKnotlist());
		}
		
		if (ae.getSource() == gui.analyse_ONE) {
			String outputString;
			this.petrinet.setMarking(this.petrinet.getInitialMarking());
			this.petrinet.changeMarking();
			this.petrigraph.changeGraph(this.knotlist);
			Analyse analyse = new Analyse(this.xmlfile , gui.textarea);
			if (analyse.analyse_ONE(this.petrinet) == true) {
				outputString = this.xmlfile.getName() + " - der  zugehörige Erreichbarkeitsgraph ist beschränkt";
				gui.textarea.append(outputString);
			}
			else {
				outputString = this.xmlfile.getName() + " - der dazugehörige Erreichbarkeitsgraph ist unbeschränkt";
				gui.textarea.append(outputString);
			}
			gui.showResult(outputString);
			this.ernet = analyse.getERNet();
			this.ergraph.changeGraph(ernet.getERknotlist(), ernet.getERArclist());
		}
		
		if (ae.getSource() == gui.EG_loeschen) {
			this.petrinet.setMarking(this.petrinet.getInitialMarking());
			this.petrigraph.changeGraph(this.knotlist);
			this.petrinet.erase_ERNet();
			this.ernet = this.petrinet.getERNet();
			this.ergraph.clear();
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
		}
		
		if (ae.getSource() == gui.reset) {
			this.petrinet.setMarking(this.petrinet.getInitialMarking());
			this.petrigraph.changeGraph(this.knotlist);
		}
		
		if (ae.getSource() == gui.minus) {
			for (int i = 0; i < this.petrinet.getPlacelist().size(); i++ ) {
				if (this.petrinet.getPlacelist().get(i).getSelection() == true) {
					if (this.petrinet.getPlacelist().get(i).getToken() - 1 >= 0) {
						this.petrinet.getPlacelist().get(i).plusToken(-1);
					}
					break;
				}
			}
			this.petrinet.changeMarking();
			this.petrinet.setInitialMarking(this.petrinet.getMarking());
			this.petrigraph.changeGraph(this.knotlist);
			this.petrinet.erase_ERNet();
			this.ernet = this.petrinet.getERNet();
			this.ergraph.clear();
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
		}

		if (ae.getSource() == gui.plus) {
			for (int i = 0; i < this.petrinet.getPlacelist().size(); i++ ) {
				if (this.petrinet.getPlacelist().get(i).getSelection() == true) {
					this.petrinet.getPlacelist().get(i).plusToken(1);
				}
			}
			this.petrinet.changeMarking();
			this.petrinet.setInitialMarking(this.petrinet.getMarking());
			this.petrigraph.changeGraph(this.knotlist);
			this.petrinet.erase_ERNet();
			this.ernet = this.petrinet.getERNet();
			this.ergraph.clear();
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
		}
		
		
	}
	
	
	public void viewClosed( String id ) {
		
	}
	
	public void buttonPushed( String id ) {
		System.out.println("ButtonPushedTest");
		if (this.petrinet.find(id) != null) {
			for (int i = 0; i < this.petrinet.getKnotlist().size(); i++) {
				if (this.petrigraph.getNode(id).getAttribute("id").toString().equals(this.petrinet.getKnotlist().get(i).getId()) == true) {
					System.out.println(this.petrigraph.getNode(id).getAttribute("id").toString());
					System.out.println(this.petrinet.getKnotlist().get(i).getId());
					System.out.println("PushedButtonTest II");
					this.petrinet.changeSelection(this.petrinet.getKnotlist().get(i).getId());
					this.ernet.changeSelection();
					System.out.println(this.petrinet.getKnotlist().get(i).getId());
				}
			
			}
			this.petrigraph.changeGraph(this.petrinet.getKnotlist());
			this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
		}
		
		else {
			if (this.ernet.find(id) != null) {
				for (int j = 0; j < this.ernet.getERknotlist().size(); j++) {		
					if (this.ergraph.getNode(id).getAttribute("id").toString().equals(this.ernet.getERknotlist().get(j).getId()) == true) {
						this.ernet.changeSelection(this.ernet.getERknotlist().get(j).getLabel());
						this.petrinet.changeSelection();
						petrinet.setMarking(this.ernet.getERknotlist().get(j).getMarking());
						petrinet.changeMarking();
					}
				}
				this.ergraph.changeGraph(this.ernet.getERknotlist(), this.ernet.getERArclist());
				this.petrigraph.changeGraph(this.petrinet.getKnotlist());
			}
			
		}
		
			
	}
	
	public void buttonReleased( String id ) {
		
	}
	
	@Override
	public void mouseClicked(MouseEvent me) {
		
		
	}

	@Override
	public void mouseEntered(MouseEvent me) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent me) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent me) {
		if (gui != null) {
			gui.pump();
		}
		
	}

	@Override
	public void mouseReleased(MouseEvent me) {
		
		if (gui != null)	{
			gui.pump();
		}
	}
	
	
	public void testprint() {
		
	}
	
	public static void main (String args[]) {
		
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				Control control = new Control();
			}
		});
		
	}

	
	
	
}
