package model;

import java.util.ArrayList;

public class PetriNet {
	private ArrayList<Knot> knotlist;
	private ArrayList<Arc> arclist;
	
	
	/**
	 * Im Konstruktor werden die Listen der Knoten und ihren Verbindungen übergeben.
	 * Es wird aus den Angaben in den Biden Listen ein Petri-Netz erstellt.
	 * @param knotlist
	 * @param arclist
	 */
	public PetriNet(ArrayList<Knot> knotlist, ArrayList<Arc> arclist) {
		this.knotlist = knotlist;										
		this.arclist = arclist;											
		for (int i = 0; i < arclist.size(); i++) {					//jeweils zuweisen von Vorgängern und Nachfolgern
			boolean found = false;
			int j = 0;
			do {
				System.out.println("Petrinet-Konstruktot-Test" + j);
				if (arclist.get(i).getSource().equals(knotlist.get(j).getId())) {
					System.out.println("Test2");
					found = true;
					
				}
				else {
					j++;
				}
			}
			while (found == false);
			
			found = false;
			int k = 0;
			
			do {
				if (arclist.get(i).getTarget().equals(knotlist.get(k).getId())) {
					found = true;
				}
				else {
					k++;
				}
			}
			while (found == false);
			knotlist.get(j).setSuccessor(knotlist.get(k));
			knotlist.get(k).setPredecessor(knotlist.get(j));
		}
	}
	
	/**
	 * Schalten einer Transition
	 */
	public void firing(String id) {
		
	}
	
	public ArrayList<Knot> getcompleteKnotList(){
		return this.knotlist;
	}
}
